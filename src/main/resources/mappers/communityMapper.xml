<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS4.dao.CommunityDAO">
	<select id="getGameIdx" resultType="com.spring.javaclassS4.vo.GameVO">
		select * from itGame where gameIdx=#{gameIdx};
	</select>
	<select id="gameSearch" resultType="com.spring.javaclassS4.vo.GameVO">
		select * from itGame where gameTitle like concat('%',#{game},'%') or gameSubTitle like concat('%',#{game},'%');
	</select>
	<select id="getCommunityList" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.section!='뉴스' and c.part!='리뷰' and c.publicType='전체' ORDER BY c.cmIdx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getCommunityPartList" resultType="com.spring.javaclassS4.vo.CommunityVO">
		<if test="part == 'info'">
			SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.part='소식/정보' and c.publicType='전체' ORDER BY c.cmIdx desc limit #{startIndexNo},#{pageSize};
		</if>
		<if test="part == 'sale'">
			SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.part='세일' and c.publicType='전체' ORDER BY c.cmIdx desc limit #{startIndexNo},#{pageSize};
		</if>
		<if test="part == 'review'">
			SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.part='리뷰' ORDER BY c.cmIdx desc limit #{startIndexNo},#{pageSize};
		</if>
		<if test="part == 'my'">
			SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.mid=#{mid} and c.section!='뉴스' and c.part!='리뷰' ORDER BY c.cmIdx desc limit #{startIndexNo},#{pageSize};
		</if>
	</select>
	<select id="showAllContent" resultType="com.spring.javaclassS4.vo.CommunityVO">
		select * from itCommunity where cmIdx=#{cmIdx};
	</select>
	<select id="getLikeMember" resultType="String">
		select likeMid from itLike where likeCmIdx=#{cmIdx};
	</select>
	<select id="getCommunityIdx" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, c.cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.cmIdx=#{cmIdx} ORDER BY c.cmIdx desc;
	</select>
	<select id="getTotRecCnt" resultType="int">
		<if test="part == 'recent'">SELECT count(*) as totRecCnt from itCommunity where section!='뉴스' and part!='리뷰' and publicType='전체';</if>
		<if test="part == 'info'">SELECT count(*) as totRecCnt from itCommunity where section!='뉴스' and part='소식/정보' and publicType='전체';</if>
		<if test="part == 'sale'">SELECT count(*) as totRecCnt from itCommunity where section!='뉴스' and part='세일' and publicType='전체';</if>
		<if test="part == 'review'">SELECT count(*) as totRecCnt from itCommunity where part='리뷰';</if>
	</select>
	<select id="getMyTotRecCnt" resultType="int">
		SELECT count(*) as totRecCnt from itCommunity where mid=#{mid} and section!='뉴스';
	</select>
	<select id="getCommunityReply" resultType="com.spring.javaclassS4.vo.ReplyVO">
		SELECT sub.* from (select r.*,timestampdiff(hour, r.replyDate, now()) as hour_diff, timestampdiff(minute, r.replyDate, now()) as min_diff,m.nickname,m.memImg,m.title from itReply r join itmember m on r.replyMid=m.mid where replyCmIdx=#{cmIdx} and replyParentIdx is NULL order by replyIdx desc limit 2) as sub order by sub.replyIdx;
	</select>
	<select id="getCommunityChildReply" resultType="com.spring.javaclassS4.vo.ReplyVO">
		SELECT sub.* from (select r.*,timestampdiff(hour, r.replyDate, now()) as hour_diff, timestampdiff(minute, r.replyDate, now()) as min_diff,m.nickname,m.memImg,m.title from itReply r join itmember m on r.replyMid=m.mid where replyCmIdx=#{replyCmIdx} and replyParentIdx=#{replyIdx} order by replyIdx desc limit 1) as sub order by sub.replyIdx;
	</select>
	<select id="getCommunityChildAllReply" resultType="com.spring.javaclassS4.vo.ReplyVO">
		select r.*,timestampdiff(hour, r.replyDate, now()) as hour_diff, timestampdiff(minute, r.replyDate, now()) as min_diff,m.nickname,m.memImg,m.title from itReply r join itmember m on r.replyMid=m.mid where replyCmIdx=#{replyCmIdx} and replyParentIdx=#{replyIdx} order by replyIdx;
	</select>
	<select id="getCommunityAllReply" resultType="com.spring.javaclassS4.vo.ReplyVO">
		<if test="sw == 0">
			select r.*,timestampdiff(hour, r.replyDate, now()) as hour_diff, timestampdiff(minute, r.replyDate, now()) as min_diff,m.nickname,m.memImg,m.title from itReply r join itmember m on r.replyMid=m.mid where replyCmIdx=#{replyCmIdx} and replyParentIdx is NULL order by replyIdx;
		</if>
		<if test="sw == 1">
			select r.*,timestampdiff(hour, r.replyDate, now()) as hour_diff, timestampdiff(minute, r.replyDate, now()) as min_diff,m.nickname,m.memImg,m.title from itReply r join itmember m on r.replyMid=m.mid where replyCmIdx=#{replyCmIdx} and replyParentIdx is NOT NULL order by replyIdx;
		</if>
	</select>
	<select id="getReplyCount" resultType="int">
		SELECT count(*) as replyCount from itReply where replyCmIdx=#{cmIdx};
	</select>
	<select id="getChildReplyCount" resultType="int">
		SELECT count(*) as childReplyCount from itReply where replyParentIdx=#{replyIdx};
	</select>
	<select id="getCommunityReplyIdx" resultType="com.spring.javaclassS4.vo.ReplyVO">
		SELECT * from itReply where replyIdx=#{replyIdx};
	</select>
	<select id="getFollow" resultType="com.spring.javaclassS4.vo.FollowVO">
		SELECT * from itFollow where myMid=#{myMid} and youMid=#{youMid};
	</select>
	<select id="getFollowMids" resultType="String">
		SELECT youMid from itFollow where myMid=#{mid};
	</select>
	<select id="getCommunityFollowList" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.mid in (${midsStr}) and c.section!='뉴스' and c.part!='리뷰' and c.publicType='전체' ORDER BY c.cmIdx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getFollowTotRecCnt" resultType="int">
		SELECT count(*) FROM itCommunity WHERE mid in (${midsStr}) and section!='뉴스' and part!='리뷰' and publicType='전체' ;
	</select>
	<select id="getReviewIdx" resultType="com.spring.javaclassS4.vo.ReviewVO">
		SELECT * FROM itReview WHERE revMid=#{mid};
	</select>
	<select id="getCMReview" resultType="String">
		SELECT cmContent FROM itCommunity WHERE mid=#{mid} and cmGameIdx=#{revGameIdx} and part='리뷰';
	</select>
	<select id="getNewsCnt" resultType="int">
		<if test="part == '전체'">SELECT count(*) FROM itCommunity WHERE section='뉴스';</if>
		<if test="part == '취재'">SELECT count(*) FROM itCommunity WHERE section='뉴스' and part='취재';</if>
		<if test="part == '예판'">SELECT count(*) FROM itCommunity WHERE section='뉴스' and part='예판';</if>
	</select>
	<select id="getNewsList" resultType="com.spring.javaclassS4.vo.CommunityVO">
		<if test="part == '전체'">
			SELECT *, timestampdiff(hour, cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff FROM itCommunity WHERE section='뉴스' ORDER BY cmIdx desc limit #{startIndexNo},#{pageSize};
		</if>
		<if test="part == '취재'">
			SELECT *, timestampdiff(hour, cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff FROM itCommunity WHERE section='뉴스' and part='취재' ORDER BY cmIdx desc limit #{startIndexNo},#{pageSize};
		</if>
		<if test="part == '예판'">
			SELECT *, timestampdiff(hour, cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff FROM itCommunity WHERE section='뉴스' and part='예판' ORDER BY cmIdx desc limit #{startIndexNo},#{pageSize};
		</if>
	</select>
	<select id="getNewsContentCmIdx" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, c.cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg FROM itCommunity c JOIN itMember m ON c.mid = m.mid WHERE c.cmIdx=#{cmIdx};
	</select>
	
	
	
	
	
	<update id="setMemGameListEdit">
		update itGamelist set gamelist=#{gamelist} where glMid=#{mid};
	</update>
	<update id="communityEdit">
		<if test="sw == 0">
		update itCommunity set cmContent=#{vo.cmContent}, part=#{vo.part}, cmGameIdx=#{vo.cmGameIdx}, publicType=#{vo.publicType}, cmHostIp=#{vo.cmHostIp} where cmIdx=#{vo.cmIdx};
		</if>
		<if test="sw == 1">
		update itCommunity set cmContent=#{vo.cmContent}, part=#{vo.part}, publicType=#{vo.publicType}, cmHostIp=#{vo.cmHostIp}, newsTitle=#{vo.newsTitle} where cmIdx=#{vo.cmIdx};
		</if>
	</update>
	<update id="replyEdit">
		update itReply set replyContent=#{replyContent},replyMid=#{replyMid} where replyIdx=#{replyIdx};
	</update>
	
	
	
	
	
	<insert id="communityInput">
		insert into itCommunity values(default,#{vo.mid},#{vo.section},#{vo.part},<if test="vo.part == '자유' or vo.cmGameIdx == 0">default,</if><if test="vo.part != '자유' and vo.cmGameIdx != 0">#{vo.cmGameIdx},</if>#{vo.cmContent},default,#{vo.cmHostIp},#{vo.publicType},default,default,#{vo.newsTitle});
	</insert>
	<insert id="setLikeAdd">
		insert into itLike values(default, #{cmIdx}, #{mid}, default);
	</insert>
	<insert id="replyInput">
		insert into itReply values(default, #{vo.replyCmIdx}, #{vo.replyMid}, null, #{vo.replyContent}, #{vo.replyHostIp}, default, default);
	</insert>
	<insert id="rreplyInput">
		insert into itReply values(default, #{vo.replyCmIdx}, #{vo.replyMid}, #{vo.replyParentIdx}, #{vo.replyContent}, #{vo.replyHostIp}, default, default);
	</insert>
	<insert id="followInput">
		insert into itFollow values(#{myMid}, #{youMid}, default);
	</insert>
	<insert id="reportInput">
		insert into itReport values(default, #{vo.reportMid}, #{vo.sufferMid}, #{vo.contentPart}, #{vo.contentIdx}, #{vo.reason}, default);
	</insert>
	
	
	
	
	
	
	<delete id="setlikeDelete">
		delete from itLike where likeCmIdx=#{cmIdx} and likeMid=#{mid};
	</delete>
	<delete id="setCommunityDelete">
		delete from itCommunity where cmIdx=#{cmIdx};
	</delete>
	<delete id="replyDelete">
		delete from itReply where replyIdx=#{replyIdx};
	</delete>
	<delete id="setReviewDelete">
		delete from itReview where revMid=#{mid} and revGameIdx=#{gameIdx};
	</delete>
	<delete id="followDelete">
		delete from itFollow where myMid=#{myMid} and youMid=#{youMid};
	</delete>
</mapper>