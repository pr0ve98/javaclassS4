<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS4.dao.HomeDAO">
	<select id="getNewGameList" resultType="com.spring.javaclassS4.vo.GameVO">
		select * from itGame where <![CDATA[showDate <= now()]]> order by showDate desc limit 4;
	</select>
	<select id="getGame" resultType="com.spring.javaclassS4.vo.GameVO">
		select * from itGame where gameIdx=#{gameIdx};
	</select>
	<select id="getMyGameCount" resultType="int">
		select count(*) from itReview where revMid=#{mid};
	</select>
	<select id="getMyGameStar" resultType="int">
		<if test="rating == 5">
			select count(*) from itReview where revMid=#{mid} and rating = 5;
		</if>
		<if test="rating == 3">
			select count(*) from itReview where revMid=#{mid} and <![CDATA[rating >= 3 and rating != 5]]>;
		</if>
		<if test="rating == 2">
			select count(*) from itReview where revMid=#{mid} and <![CDATA[rating <= 2]]>;
		</if>
	</select>
	<select id="getMyGameState" resultType="int">
		select count(*) from itReview where revMid=#{mid} and state=#{state};
	</select>
	<select id="reviewGameIdxAll" resultType="com.spring.javaclassS4.vo.CommunityVO">
		select * from itCommunity where cmGameIdx=#{gameIdx} and part='리뷰' and publicType='전체' and <![CDATA[rating >= 3]]>;
	</select>
	<select id="reviewGameIdxN" resultType="com.spring.javaclassS4.vo.CommunityVO">
		select * from itCommunity where cmGameIdx=#{gameIdx} and part='리뷰' and publicType='전체' and <![CDATA[rating <= 2]]>;
	</select>
	<select id="getRatingCount" resultType="int">
		select count(*) from itReview where revGameIdx=#{gameIdx} and rating=#{rating};
	</select>
	<select id="allCount" resultType="int">
		select count(*) from itReview where revGameIdx=#{gameIdx};
	</select>
	<select id="getPosiBest" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, c.cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle, likeSub.likeCnt FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx LEFT JOIN (SELECT c.cmIdx, count(l.likeCmIdx) as likeCnt FROM itCommunity c LEFT JOIN itLike l ON c.cmIdx = l.likeCmIdx WHERE c.cmGameIdx = #{gameIdx} AND c.part = '리뷰' and c.publicType='전체' AND c.rating >= 3 GROUP BY c.cmIdx ORDER BY likeCnt desc LIMIT 1) as likeSub ON c.cmIdx = likeSub.cmIdx WHERE c.part = '리뷰' AND c.cmGameIdx = #{gameIdx} AND c.rating >= 3 ORDER BY c.cmIdx desc LIMIT 1;
	</select>
	<select id="getNegaBest" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, c.cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle, likeSub.likeCnt FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx LEFT JOIN (SELECT c.cmIdx, count(l.likeCmIdx) as likeCnt FROM itCommunity c LEFT JOIN itLike l ON c.cmIdx = l.likeCmIdx WHERE c.cmGameIdx = #{gameIdx} AND c.part = '리뷰' and c.publicType='전체' AND <![CDATA[c.rating <= 2]]> GROUP BY c.cmIdx ORDER BY likeCnt desc LIMIT 1) as likeSub ON c.cmIdx = likeSub.cmIdx WHERE c.part = '리뷰' AND c.cmGameIdx = #{gameIdx} AND <![CDATA[c.rating <= 2]]> ORDER BY c.cmIdx desc LIMIT 1;
	</select>
	<select id="getMyReview" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, c.cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.part = '리뷰' AND c.cmGameIdx = #{gameIdx} AND c.mid=#{mid};
	</select>
	<select id="showAllContent" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, c.cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.cmIdx=#{cmIdx};
	</select>
	<select id="ilgiCnt" resultType="int">
		select count(*) from itCommunity where cmGameIdx=#{gameIdx} and part='일지' and publicType='전체';
	</select>
	<select id="getIlgiList" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, c.cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.part = '일지' AND c.cmGameIdx = #{gameIdx} and c.publicType='전체' order by cmIdx desc limit 2;
	</select>
	<select id="infoCnt" resultType="int">
		select count(*) from itCommunity where cmGameIdx=#{gameIdx} and part='소식/정보' and publicType='전체';
	</select>
	<select id="getInfolist" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, c.cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.part = '소식/정보' AND c.cmGameIdx = #{gameIdx} and c.publicType='전체' order by cmIdx desc limit 2;
	</select>
	<select id="getGameViewRCTotRecCnt" resultType="int">
		<if test="part == '리뷰'">SELECT count(*) as totRecCnt from itCommunity where cmGameIdx=#{gameIdx} and part='리뷰';</if>
		<if test="part == '일지'">SELECT count(*) as totRecCnt from itCommunity where cmGameIdx=#{gameIdx} and part='일지' and publicType='전체';</if>
		<if test="part == '소식/정보'">SELECT count(*) as totRecCnt from itCommunity where cmGameIdx=#{gameIdx} and part='소식/정보' and publicType='전체';</if>
	</select>
	<select id="getGameViewRCList" resultType="com.spring.javaclassS4.vo.CommunityVO">
		<if test="part == '리뷰'">SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.cmGameIdx=#{gameIdx} and c.part='리뷰' ORDER BY c.cmIdx desc limit #{startIndexNo},#{pageSize};</if>
		<if test="part == '일지'">SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.cmGameIdx=#{gameIdx} and c.part='일지' and c.publicType='전체' ORDER BY c.cmIdx desc limit #{startIndexNo},#{pageSize};</if>
		<if test="part == '소식/정보'">SELECT c.*, timestampdiff(hour, c.cmDate, now()) as hour_diff, timestampdiff(minute, cmDate, now()) as min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.cmGameIdx=#{gameIdx} and c.part='소식/정보' and c.publicType='전체' ORDER BY c.cmIdx desc limit #{startIndexNo},#{pageSize};</if>
	</select>
	<select id="getMyGameList" resultType="com.spring.javaclassS4.vo.ReviewVO">
		<if test="part == 'recent' or part == 'recentReview'">SELECT r.*, g.gameImg, g.gameIdx FROM itReview r LEFT JOIN itGame g ON r.revGameIdx = g.gameIdx WHERE r.revMid=#{mid} ORDER BY r.revIdx desc limit 4;</if>
		<if test="part == 'nowPlaying'">SELECT r.*, g.gameImg, g.gameIdx FROM itReview r LEFT JOIN itGame g ON r.revGameIdx = g.gameIdx WHERE r.revMid=#{mid} and r.state='play' ORDER BY r.revIdx desc limit 4;</if>
		<if test="part == 'highStar'">SELECT r.*, g.gameImg, g.gameIdx FROM itReview r LEFT JOIN itGame g ON r.revGameIdx = g.gameIdx WHERE r.revMid=#{mid} ORDER BY r.rating desc limit 4;</if>
	</select>
	<select id="bestReviews" resultType="com.spring.javaclassS4.vo.CommunityVO">
		SELECT c.*, TIMESTAMPDIFF(hour, c.cmDate, NOW()) AS hour_diff, TIMESTAMPDIFF(minute, c.cmDate, NOW()) AS min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx LEFT JOIN (SELECT l.likeCmIdx, COUNT(l.likeCmIdx) AS likeCnt FROM itLike l GROUP BY l.likeCmIdx) likes ON c.cmIdx = likes.likeCmIdx WHERE c.part = '리뷰' AND likes.likeCnt >= 5 ORDER BY RAND() LIMIT 3;
	</select>
	<select id="homeCommunity" resultType="com.spring.javaclassS4.vo.CommunityVO">
		<if test="part == '인기'">SELECT c.*, TIMESTAMPDIFF(hour, c.cmDate, NOW()) AS hour_diff, TIMESTAMPDIFF(minute, c.cmDate, NOW()) AS min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx LEFT JOIN (SELECT l.likeCmIdx, COUNT(l.likeCmIdx) AS likeCnt FROM itLike l GROUP BY l.likeCmIdx) likes ON c.cmIdx = likes.likeCmIdx WHERE c.section != '뉴스' and c.part != '리뷰' ORDER BY likes.likeCnt desc LIMIT 5;</if>
		<if test="part == '세일'">SELECT c.*, TIMESTAMPDIFF(hour, c.cmDate, NOW()) AS hour_diff, TIMESTAMPDIFF(minute, c.cmDate, NOW()) AS min_diff, m.idx, m.title, m.nickname, m.memImg, g.gameIdx, g.gameTitle FROM itCommunity c JOIN itMember m ON c.mid = m.mid LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.section != '뉴스' and (c.cmContent like concat('%','세일','%') or c.cmContent like concat('%','할인','%')) ORDER BY c.cmIdx desc LIMIT 5;</if>
	</select>
	<select id="getAlram" resultType="com.spring.javaclassS4.vo.AlramVO">
		<if test="level != 0">
			SELECT * FROM (SELECT NULL AS idx, NULL AS cmIdx, f.myMid AS youMid, '팔로우' AS type, f.followDate AS date, m.nickname AS youName, m.memImg AS youImg, NULL AS gameIdx, NULL AS gameTitle, NULL AS gameImg, NULL AS comType FROM itFollow f JOIN itMember m ON f.myMid = m.mid WHERE f.youMid = #{mid} AND f.followRead = 0 UNION ALL 
			SELECT l.likeIdx AS idx, l.likeCmIdx AS cmIdx, l.likeMid AS youMid, '좋아요' AS type, l.likeDate AS date, m.nickname AS youName, m.memImg AS youImg, g.gameIdx AS gameIdx, g.gameTitle AS gameTitle, g.gameImg AS gameImg, NULL AS comType FROM itLike l JOIN itMember m ON l.likeMid = m.mid JOIN itCommunity c ON l.likeCmIdx = c.cmIdx JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.mid = #{mid} AND l.likeMid != #{mid} AND l.likeRead = 0 UNION ALL 
			SELECT r.replyIdx AS idx, r.replyCmIdx AS cmIdx, r.replyMid AS youMid, '댓글' AS type, r.replyDate AS date, m.nickname AS youName, m.memImg AS youImg, g.gameIdx AS gameIdx, g.gameTitle AS gameTitle, g.gameImg AS gameImg, NULL AS comType FROM itReply r JOIN itMember m ON r.replyMid = m.mid JOIN itCommunity c ON r.replyCmIdx = c.cmIdx LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE c.mid = #{mid} AND r.replyMid != #{mid} AND r.replyParentIdx is NULL AND r.replyRead = 0 UNION ALL 
			SELECT r1.replyIdx AS idx, r1.replyCmIdx AS cmIdx, r1.replyMid AS youMid, '답글' AS type, r1.replyDate AS date, m.nickname AS youName, m.memImg AS youImg, g.gameIdx AS gameIdx, g.gameTitle AS gameTitle, g.gameImg AS gameImg, NULL AS comType FROM itReply r1 JOIN itMember m ON r1.replyMid = m.mid JOIN itCommunity c ON r1.replyCmIdx = c.cmIdx LEFT JOIN itGame g ON c.cmGameIdx = g.gameIdx WHERE r1.replyRead = 0 AND r1.replyParentIdx IS NOT NULL AND EXISTS (SELECT 1 FROM itReply r2 WHERE r2.replyIdx = r1.replyParentIdx AND r2.replyMid = #{mid}) AND r1.replyMid != #{mid})
			AS results ORDER BY date DESC;
		</if>
		<if test="level == 0">
			SELECT count(*) AS adminCount, '신고' AS type FROM itReport WHERE complete = 0 UNION ALL 
			SELECT count(*) AS adminCount, '게임요청' AS type FROM itGameRequest WHERE grComplete = 0 UNION ALL 
			SELECT count(*) AS adminCount, '문의' AS type FROM itSupport WHERE supComplete = 0;
		</if>
	</select>
	
	
	
	
	
	<update id="followRead">
		update itFollow set followRead=1 where myMid=#{youMid} and youMid=#{myMid};
	</update>
	<update id="likeAndReplyRead">
		<if test="part == '좋아요'">update itLike set likeRead=1 where likeIdx=#{idx};</if>
		<if test="part == '댓글'">update itReply set replyRead=1 where replyIdx=#{idx};</if>
	</update>
</mapper>